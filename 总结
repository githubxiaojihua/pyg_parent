1、建立工程项目结构
2、导入相关依赖
3、配置好配置文件
4、使用mybatis插件做好逆向工程，注意如果采用纯maven编译的话，需要将xml文件从src\main\java中拿到resources中
   否则无法编译，也就找不到相关xml文件。
5、创建service接口和实现类
6、创建controller
7、测试http://localhost:8082/pygmanagerWeb(这个项目的发布路径)/brand/findAll
8、本项目使用tomcat服务器，而非tomcat插件来运行


使用dubbo作为服务治理框架，zookeeper作为注册中心，pyg_manager_web远程调用pyg_manager_interface中发布的服务，
实际上调用的是pgy_manager_service的实现类


1、写了几个angularjs的demo页面，注意要在tomcat中运行。
2、做了brand.html页面的开发，主要包括，列表展现、分页组件、增加、修改、删除、按照条件查询等。
3、分页，（参考第二天教程中的部分说明）
   后端--采用了mybatis的PageHelper分页插件
        1）在SqlMapConfig.xml配置插件
        2）导入相关jar包
        3）使用：
                // 初始化mybatis分页组件，此组件已经在SqlMapConfig.xml中配置了
                // 是一个监听器，也就是每次在查询mybatis的时候都会进行过滤分页
                // 此句必须在查询操作之前
                PageHelper.startPage(pageNum,pageSize);
                //List={page[total,pagesie],list}
                Page<TbBrand> page = (Page<TbBrand>)tbBrandMapper.selectByExample(new TbBrandExample());
   前端--采用了angularjs的分页组件：tm-pagination
        1）导入相关js
           <!-- 分页组件js-->
           <script src="../plugins/angularjs/pagination.js"></script>
           <!-- 分页组件css-->
           <link rel="stylesheet" href="../plugins/angularjs/pagination.css">
        2)在angularjs中引入组件并配置相关方法
            //定义模块，引入引入pagination分页模块
        	var app = angular.module("pyg", ['pagination']);
        	//定义控制器
        	app.controller(
        			"brandController",
        			function($scope, $http) {

                        //重新加载列表 数据
                        $scope.reloadList = function() {
                            //切换页码
                            $scope.findPage($scope.paginationConf.currentPage,
                                $scope.paginationConf.itemsPerPage);
                        }
                        //分页控件配置
                        $scope.paginationConf = {
                            currentPage : 1,
                            totalItems : 10,
                            itemsPerPage : 10,
                            perPageOptions : [ 10, 20, 30, 40, 50 ],
                            onChange : function() {
                                $scope.reloadList();//重新加载
                            }
                        };
                        //分页
                        $scope.findPage = function(page, rows) {
                            $http.get('../brand/findPage?page=' + page + '&rows='+ rows).success(function(data) {
                                $scope.list = data.rows;
                                $scope.paginationConf.totalItems = data.total;//更新总记录数
                            });
                        };


        			})
        3）在html中插入元素
                    <!--数据列表/-->
        			<tm-pagination conf="paginationConf"></tm-pagination>

注意，在新建品牌的时候，ng-click事件已经对entity进行了初始化，因此，页面元素可以通过ng-model双向绑定对其进行赋值
<!-- 注意在这里ng-click进行了entity对象的初始化-->
<button type="button" class="btn btn-default" title="新建"
data-toggle="modal" ng-click="entity={}" data-target="#editModal">

运营商后台的页面 login.html  (pygmanagerWeb)


前端angularjs分层以及服务抽取、控制层继承
新增规格，通过angularjs的双向绑定来实现动态添加表格行和删除表格行
模板管理的相关功能，将提取json字符串中指定字段的方法进行了抽取，用于在模版管理页面显示正常数据，因为默认从数据库中
得到的数据是json字符串
select2多选下拉框的使用

spring security简单入门demo，代码为springSecurityDemo
在pyg_manager_web中集成springsecurity，本例与教程中不一样的地方是，在web.xml中使用springmvc容器直接加载了
spring security的配置文件，而且教程中增加了sprig容器，用spring容器加载spring security。
本例中配置了自定义的login界面，资源放行等可以看spring-security.xml文件
在index.html中回显登陆人员的用户名，后台是通过使用springsecurity的SecurityContextHolder类进行获取
配置完成以后登陆成功前访问任何页面都必须先到登录页面进行登录，登录后再能访问其他页面。

